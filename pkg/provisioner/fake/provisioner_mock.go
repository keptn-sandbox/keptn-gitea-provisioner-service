// Code generated by MockGen. DO NOT EDIT.
// Source: keptn-sandbox/keptn-gitea-provisioner/pkg/provisioner (interfaces: GitProvisioner)

// Package fake is a generated GoMock package.
package fake

import (
	keptn "keptn-sandbox/keptn-gitea-provisioner/pkg/keptn"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGitProvisioner is a mock of GitProvisioner interface.
type MockGitProvisioner struct {
	ctrl     *gomock.Controller
	recorder *MockGitProvisionerMockRecorder
}

// MockGitProvisionerMockRecorder is the mock recorder for MockGitProvisioner.
type MockGitProvisionerMockRecorder struct {
	mock *MockGitProvisioner
}

// NewMockGitProvisioner creates a new mock instance.
func NewMockGitProvisioner(ctrl *gomock.Controller) *MockGitProvisioner {
	mock := &MockGitProvisioner{ctrl: ctrl}
	mock.recorder = &MockGitProvisionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitProvisioner) EXPECT() *MockGitProvisionerMockRecorder {
	return m.recorder
}

// DeleteRepository mocks base method.
func (m *MockGitProvisioner) DeleteRepository(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepository indicates an expected call of DeleteRepository.
func (mr *MockGitProvisionerMockRecorder) DeleteRepository(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockGitProvisioner)(nil).DeleteRepository), arg0, arg1)
}

// ProvisionRepository mocks base method.
func (m *MockGitProvisioner) ProvisionRepository(arg0, arg1 string) (*keptn.ProvisionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionRepository", arg0, arg1)
	ret0, _ := ret[0].(*keptn.ProvisionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionRepository indicates an expected call of ProvisionRepository.
func (mr *MockGitProvisionerMockRecorder) ProvisionRepository(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionRepository", reflect.TypeOf((*MockGitProvisioner)(nil).ProvisionRepository), arg0, arg1)
}
